G1 := [0,-1,1,0,0,0,0,0,0,0];
G2 := [0,0,0,-1,1,0,0,0,0,0];
G3 := [0,0,0,0,0,-1,1,0,0,0];

L1 := [1,-1,-1,0,0,0,-1,0,0,0];
L2 := [1,0,-1,0,0,0,0,-1,-1,0];
L3 := [1,0,-1,0,-1,0,0,0,0,-1];
L4 := [1,0,0,0,-1,0,-1,0,-1,0];
L5 := [1,0,0,0,0,-1,-1,0,0,-1];
L6 := [1,0,0,-1,-1,0,0,-1,0,0];


R:=[G1,G2,G3,L1,L2,L3,L4,L5,L6];

//

Rv := [L!(Eltseq(Matrix(1,10,Eltseq(r))*M)): r in R];
Kv := L!(Eltseq(Matrix(1,10,Eltseq(K))*M));
P := &meet[HalfspaceToPolyhedron(Rv[i],0) : i in [1..#Rv]] meet HyperplaneToPolyhedron(-Kv,1);
pts :=  SetToSequence(Points(CompactPart(P)));
S := [L!p+(qua(p,p,M)+1)/2*K: p in pts];

//

NegEx4 := [L!r : r in R] cat S;

H := HNef(NegEx4);

CB := [Z : Z in H | qua(Z,Z,M) eq 0 and qua(Z,-K,M) eq 2];

HNef2 := {L!C+L!P : C in Seqset(CB) | P in Seqset(S)};

//

PND:=Seqset(H) join HNef2; 

//

X:=[];
for A in PND do
if #Test2(A,NegEx4,M,H) ge 1 then X:= X cat [A];  
end if;
end for;

X1:=PND diff Set(X);   
