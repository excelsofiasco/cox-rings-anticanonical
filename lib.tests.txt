Test1 := function(N,Neg,M,H);
X :=[];
for Z in DisjointNef(Neg,M,H) do
N1:=L!N-L!Z[1]-L!Z[2];
if IsNullh1(N1,Neg,M) then X := X cat [[L!N,L!Z[1],L!Z[2]]];
end if;
end for;
return X;
end function;

//

Test2 := function(N,Neg,M,H);
if L!N eq -L!K or L!N eq -2*L!K then return [];
end if;
S := [Z : Z in DisjointCurves(Neg,M) | qua(L!N,L!Z[1],M) eq 0];
X :=[];
for Z in S do
N2:=L!N-L!Z[2];
if IsEff(N2,Neg,M,H) then
if Nefification(L!Z[1],N2,Neg,H)
then X := X cat [[L!N,L!Z[1],L!Z[2]]];
end if;
end if;
end for;
return X;
end function;

//

Test3 := function(N,Neg,M,H);
X := [];
for Z in NegTriples(Neg) do
N1 := L!N-L!Z[1]-L!Z[2];
N2 := L!N-L!Z[2]-L!Z[3];
N3 := L!N-L!Z[1]-L!Z[3];
N4 := L!N-L!Z[1]-L!Z[2]-L!Z[3];
if IsNullh1(N1,Neg,M) and IsNullh1(N2,Neg,M) and IsNullh1(N3,Neg,M)
and IsEff(L!K-L!N4,Neg,M,H) then
X := X cat [[L!N,L!Z[1],L!Z[2],L!Z[3]]];
end if;
end for;
return X;
end function;